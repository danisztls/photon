#!/bin/bash
# Moves and rename pictures to a time-based structure of dirs and files. Move only valid images, use exif date, solve collisions and move non-image to root.
# Dependencies: ripgrep, exiv2, rmlint, trash-cl

# FUNCTIONS
function printHelp {
    printf "HELP:
     \e[1m'--import'\e[0m Smartly import images from source to destination. Dedup. import only images, organize and rename by date. Usage: photon --import srcDir dstDir;
     \e[1m'--export'\e[0m Smartly export optimized images from source to destination. 
     Usage: photon --export srcDir dstDir -h height (defaults to 1080p) -f format (defaults to original, don't use for better quality and use webp for smaller size);
     \e[1m'--optimize'\e[0m Do the same thing as export but dumbly. Requires only a target dir and Will overwrite files.
     \e[1m'--dedup'\e[0m Move duplicates of images at target to trash. Usage: photon --dedup targetDir."
}

# Find all image files in target dir.
function findPics { find "$1" -regex '.*\.\(jpg\|jpeg\|png\|webp\)'; }

# Add or modify file Exif 'Creation Date' tag. 
function setExif {
    #srcPath="$1"; srcDate="$2"

    timeRFC3339=$(date -d "@$2" "+%Y-%m-%d %H:%M:%S") || return 1 # if date is invalid
    
    # shellcheck disable=SC2086
    exiv2 -M "set Exif.Photo.DateTimeOriginal $timeRFC3339" "$1"
}

# Return 0 if files are equal and 1 if they are not. Use Metro hashing.
function compareHashes { rmlint --equal "$1" "$2" -O summary:stdout &>/dev/null && return 0 || return 1; }

# Move file from A to B. For collisions ignore when equal and rename when different.
function smartMove {
    srcPath="$1"; dstDir="$2"; dstFile="$3"

    if [ -f "$dstDir/$dstFile" ]; then # if file already exists
        echo "$dstDir/$dstFile already exists"
        if compareHashes "$srcPath" "$dstDir/dstFile"; then
            echo "They are equal, deleting at source."
            trash -f "$srcPath"; return 0
        else
            echo "They aren't equal, renaming at destination."
            filePreffix="${dstFile%.*}"; fileSuffix="${dstFile#*.}"
            randomUID=$(tr -dc 'a-zA-Z0-9' < /dev/urandom | head --bytes 8)
            newFile="$filePreffix-$randomUID.$fileSuffix" # append random string to file name
            smartMove "$srcPath" "$dstDir" "$newFile"; return 0 # thunder can strike the same place twice
        fi
    else
        newFile="$dstFile"
    fi
    # echo "Moving $srcPath to $dstDir/$newFile" # verbose
    mkdir -p "$dstDir"; mv -n "$srcPath" "$dstDir/$newFile"
}

# Iterate over image files in A and smart move them do B.
function importPics {
    src=$1; dst=$2

    [ -d "$src" ] || (echo "Source dir don't exist."; exit 1)
    [ -d "$dst" ] || (echo "Destination dir don't exist."; exit 1)
    
    mapfile -t pictures < <(findPics "$src") # see SC2207
    for srcPath in "${pictures[@]}"; do
        unset mime exif exifDate dstDir dstName # garbage collection

        mime=$(file --mime-type "$srcPath") # check mime type and skip iteration if not an image
        if ! (rg "image/" <<< "$mime" 1>/dev/null); then
            echo "$srcPath is not an image."; continue
        fi

        exif=$(exiv2 pr "$srcPath" 2>/dev/null) && # get exif date
        srcDate=$(rg -a 'Image timestamp : ' -r '' <<< "$exif" | head -1 | sed 's/:/\//;s/:/\//')
       
        if ! [ "$srcDate" ]; then # if exif data doesn't exist use modify time and add exif tag to file
            srcDate="$(date -r "$srcPath" "+%s")" && setExif "$srcPath" "$srcDate"
        fi

        dstDir="$dst/$(date -d "@$srcDate" "+%y-%m")" # dir name is YY-MM
        # shellcheck disable=SC2030,SC2031
        dstName="$(date -d "@$srcDate" "+%s").${mime##*/}" # use timestamp on name and mime type on extension
        
        smartMove "$srcPath" "$dstDir" "$dstName" # move files
    done
}

# Move all except hidden files to root.
# TODO: Clean in the future if it's not being used.
function moveMisc {
    rootDir="$1"
    mapfile -t misc < <(find "$rootDir" -type f -not -path "*/.*" -not -path "./*/*") 
    for filePath in "${misc[@]}"; do
        smartMove "$filePath" "$rootDir" "${filePath##*/}" 
    done
}

# Dedup and lint files at target.
function dedupPics {
    findPics "$1" | rmlint - -T "bl,ed,ef,df" -R -PP -v -S "lam" -o "sh:/tmp/rmlint" && /tmp/rmlint -c -d 1>/dev/null

    # rmlint don't delete by itself but export a script that does that. When you set the output with -o it don't use the defaults and will work stupidly.
    # You have to manuallly tell him everything. And -c and -d are script arguments for delete empty folders and run quiet.
}

# Delete from destination files not found on source
function cleanPics {
    srcDir="$1" ; dstDir="$2"
    mapfile -t pictures < <(findPics "$dstDir")
    for dstPath in "${pictures[@]}"; do
        # shellcheck disable=SC2128 # just want first element
        [[ $dstPath =~ [0-9]{2}-[0-9]{2}/[0-9]{10}.* ]] && filePath=$BASH_REMATCH # get "YY-MM/timestamp.fmt"
        [[ -f "$srcDir/$filePath" ]] || trash -f "$dstPath"
    done
}

# Compare modify times. Pass back true if A is newer than B, and false otherwise. 
function compareMTimes {
    [[ -f "$1" ]] && [[ -f "$2" ]] || return # return if any of the files don't exist 
    # shellcheck disable=SC2086
    # shellcheck disable=SC2015 # that's purposeful
    [[ $(stat -c %Y "$1") -gt $(stat -c %Y "$2") ]] && eval $3=true || eval $3=false
}

# Convert image using ImageMagick
# shellcheck disable=SC2086
function convertPic { convert -resize x$optimal_height\> "$1" "$2"; } #\> is needed to only dowscale images

# Resize images, strip metadata and export while optionallly converting.
function optimizePics {
    src="$1"; dst="$2"

    [ -d "$src" ] || (echo "Source dir don't exist."; exit 1)
    [ -d "$dst" ] || (echo "Destination dir don't exist."; exit 1)
    
    # shellcheck disable=SC2086
    [ $optimal_height ] || optimal_height=1080 # default image height 

    mapfile -t pictures < <(findPics "$src")
    
    for srcPath in "${pictures[@]}"; do
        # shellcheck disable=2128 # just want first element 
        [[ $srcPath =~ [0-9]{2}-[0-9]{2}/[0-9]{10}.* ]] && filePath=$BASH_REMATCH # get "YY-MM/timestamp.fmt"

        # shellcheck disable=SC2086
        [ $optimal_format ] && dstPath="$dst/${filePath/.*/.$optimal_format}" || dstPath="$dst/$filePath"
        
        compareMTimes "$srcPath" "$dstPath" "isNewer"
        # shellcheck disable=SC2154 # isNewer is a pass back boolean
        ${isNewer} || continue # skip iteration if source is not newer

        # shellcheck disable=SC2086
        mkdir -p ${dstPath%/*}
        convertPic "$srcPath" "$dstPath" # convert with ImageMagick       
    done
}

# MAIN

# FIXME: Not working with --switch
# read optional flags
#while getopts h:f: flag; do
#	case "${flag}" in
#	    h) optimal_height=${OPTARG};;
#	    f) optimal_format=${OPTARG};;
#        \?) echo "Invalid flag!"; exit 1;;
#        :) ;;
#	esac
#done

# flags override
optimal_height="1440"
optimal_format=""

# $2 is srcDir or targetDir, $3 is dstDir
case $1 in
    --import) dedupPics "$2" && importPics "$2" "$3";;
    --export) optimizePics "$2" "$3" && cleanPics "$2" "$3";;
    --optimize) optimizePics "$2" "$2";; 
    --dedup) dedupPics "$2";;
    *) printHelp; exit;; 
esac

