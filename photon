#!/bin/bash

# Photon is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License v3 as published by the Free Software Foundation.
# It is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with it. If not, see <https://www.gnu.org/licenses/>.

# FUNCTIONS
printHelp() {
    printf "HELP:
     \e[1m'--import'\e[0m Import images from source to destination. Dedup. import only images, organize and rename by date. Usage: photon --import srcDir dstDir;
     \e[1m'--export'\e[0m Export optimized images from source to destination. Usage: photon --export srcDir dstDir -h height (defaults to 1080p) -f format (defaults to original, don't use for better quality and use webp for smaller size). If you omit dstDir it will instead overwrite images at target.
     \e[1m'--dedup'\e[0m Move duplicated images at target to trash. Usage: photon --dedup targetDir."
}

# Find all image files in target dir.
findPics() { fd -i '^.*\.(jpg|jpeg|png|webp)$' "$1"; }

# Add or modify file Exif 'Creation Date' tag. 
setExif() {
    #srcPath="$1"; srcDate="$2"

    timeRFC3339=$(date -d "@$2" "+%Y-%m-%d %H:%M:%S") || return 1 # if date is invalid
    
    # shellcheck disable=SC2086
    exiv2 -M "set Exif.Photo.DateTimeOriginal $timeRFC3339" "$1"
}

# Return 0 if files are equal and 1 if they are not. Use Metro hashing.
compareHashes() { rmlint --equal "$1" "$2" -O summary:stdout &>/dev/null && return 0 || return 1; }

# Move file from A to B. For collisions ignore when equal and rename when different.
smartMove() {
    srcPath="$1"; dstDir="$2"; dstFile="$3"

    if [ -f "$dstDir/$dstFile" ]; then # if file already exists
        echo "$dstDir/$dstFile already exists"
        if compareHashes "$srcPath" "$dstDir/dstFile"; then
            echo "They are equal, deleting at source."
            trash -f "$srcPath"; return 0
        else
            echo "They aren't equal, renaming at destination."
            filePreffix="${dstFile%.*}"; fileSuffix="${dstFile#*.}"
            randomUID=$(tr -dc 'a-zA-Z0-9' < /dev/urandom | head --bytes 8)
            newFile="$filePreffix-$randomUID.$fileSuffix" # append random string to file name
            smartMove "$srcPath" "$dstDir" "$newFile"; return 0 # thunder can strike the same place twice
        fi
    else
        newFile="$dstFile"
    fi
    # echo "Moving $srcPath to $dstDir/$newFile" # verbose
    mkdir -p "$dstDir"; mv -n "$srcPath" "$dstDir/$newFile"
}

# Iterate over image files in A and smart move them do B.
importPics() {
    src=$1; dst=$2

    [ -d "$src" ] || (echo "Source dir don't exist."; exit 1)
    [ -d "$dst" ] || (echo "Destination dir don't exist."; exit 1)
    
    mapfile -t pictures < <(findPics "$src") # see SC2207
    for srcPath in "${pictures[@]}"; do
        unset mime exif srcDate dstDir dstName # garbage collection

        mime=$(file --mime-type "$srcPath") # check mime type and skip iteration if not an image
        if ! (rg "image/" <<< "$mime" 1>/dev/null); then
            echo "$srcPath is not an image."; continue
        fi

        if exif=$(exiv2 pr "$srcPath" 2>/dev/null); then # get date from exif
            srcDate=$(rg -a 'Image timestamp : ' -r '' <<< "$exif" | head -1 | sed 's/:/\//;s/:/\//')
        fi

        if ! [ "$srcDate" ]; then # if exif data doesn't exist use modify time and add exif tag to file
            srcDate="$(date -r "$srcPath" "+%s")" && setExif "$srcPath" "$srcDate"
        fi

        dstDir="$dst/$(date -d "@$srcDate" "+%y-%m")" # dir name is YY-MM
        # shellcheck disable=SC2030,SC2031
        dstName="$(date -d "@$srcDate" "+%s").${mime##*/}" # file name is YY-MM-DDTHH-MM-SS.mime_type
        
        smartMove "$srcPath" "$dstDir" "$dstName" # move files
    done
}

# Dedup and lint files at target.
dedupPics() {
    findPics "$1" | rmlint - -T "bl,ed,ef,df" -R -PP -v -S "lam" -o "sh:/tmp/rmlint" && /tmp/rmlint -c -d 1>/dev/null

    # rmlint don't delete by itself but export a script that does that. When you set the output with -o it don't use the defaults and will work stupidly.
    # You have to manuallly tell him everything. And -c and -d are script arguments for delete empty folders and run quiet.
}

# Compare modify times. Pass back 1 B is newer than A and 0 otherwise. 
compareTimes() {
    [[ -f "$1" ]] && [[ -f "$2" ]] || return 0 # return if any file don't exist 
    [[ $(stat -c %Y "$1") -gt $(stat -c %Y "$2") ]] && return 0 || return 1
}

# Convert image using ImageMagick
# shellcheck disable=SC2086
convertPic() { convert -resize x$optimal_height\> "$1" "$2"; } #\> is needed to only dowscale images

# Resize images, strip metadata and export while optionallly converting.
exportPics() {
    src="$1"; [ -d "$src" ] || exit 1
    
    if [ "$2" ]; then
        dst="$2"; [ -d "$dst" ] || exit 1 
    else
        dst="$1"
    fi
    
    [ "$optimal_height" ] || optimal_height=1080 # default image height 

    mapfile -t pictures < <(findPics "$src")
    
    for srcPath in "${pictures[@]}"; do
        fileName="${srcPath##*/}"; [ "$optimal_format" ] && fileName="${fileName/.*/.$optimal_format}"
        
        ! [ "$2" ] || compareTimes "$srcPath" "$dstPath" || continue # skip iteration if source is not newer

        dstPath="$dst/$fileName"; convertPic "$srcPath" "$dstPath" # ImageMagick

        touch -m -d "@${fileName%%[-.]*}" "$dstPath" # set modify date
    done
}

# Look at source for file with same base name and return error if none found. 
picExist() {
    for ext in "${picExtensions[@]}"; do
        [[ -f "$srcPath.$ext" ]] && return 0
    done; return 1
}

# Delete from destination files not found on source
cleanPics() {
    srcDir="$1" ; dstDir="$2"
     
    mapfile -t pictures < <(findPics "$dstDir")
    for dstPath in "${pictures[@]}"; do
        fileName=${dstPath##*/}; fileName=${fileName%.*};
        fileDir=$(date -d "@${fileName%-*}" "+%y-%m")
        srcPath="$srcDir/$fileDir/$fileName"
        picExist || trash -f "$dstPath"
    done
}

# MAIN

# FIXME: Not working with --switch
# read optional flags
#while getopts h:f: flag; do
#	case "${flag}" in
#	    h) optimal_height=${OPTARG};;
#	    f) optimal_format=${OPTARG};;
#        \?) echo "Invalid flag!"; exit 1;;
#        :) ;;
#	esac
#done

# flags override
picExtensions=(jpg JPG jpeg JPEG webp WEBP png PNG)
optimal_height="1440"
optimal_format="webp"

# $2 is srcDir or targetDir, $3 is dstDir
case $1 in
    --import) importPics "$2" "$3";;
    --export) exportPics "$2" "$3";;
    --dedup) dedupPics "$2";;
    --clean) cleanPics "$2" "$3";;
    *) printHelp; exit;; 
esac

