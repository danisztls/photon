#!/bin/bash
# Moves and rename pictures to a time-based structure of dirs and files. Move only valid images, use exif date, solve collisions and move non-image to root.
# Dependencies: ripgrep, exiv2, rmlint, trash-cl

# FUNCTIONS
function printHelp {
    printf "HELP:
    \t\e[1m'--import'\e[0m Smartly import images from source to destination. Dedup. import only images, organize and rename by date. Usage: photon --import srcDir dstDir;
    \t\e[1m'--export'\e[0m Smartly export optimized images from source to destination.
    \tUsage: photon --export srcDir dstDir -h height (defaults to 1080p) -f format (defaults to original, don't use for better quality and use webp for smaller size);
    \t\e[1m'--optimize'\e[0m Do the same thing as export but dumbly. Requires only a target dir and Will overwrite files.
    \t\e[1m'--dedup'\e[0m Move duplicates of images at target to trash. Usage: photon --dedup targetDir."
}

# Find all image files in target dir.
function findPics { find "$1" -regex '.*\.\(jpg\|jpeg\|png\|webp\)'; }

# Return 0 if files are equal and 1 if they are not. Use Metro hashing.
function compareHashs { rmlint --equal "$1" "$2" -O summary:stdout &>/dev/null && return 0 || return 1; }

# Move file from A to B. For collisions ignore when equal and rename when different.
function smartMove {
    srcPath="$1"; dstDir="$2"; dstFile="$3"

    if [ -f "$dstDir/$dstFile" ]; then # if file already exists
        echo "$dstDir/$dstFile already exists"
        if compareHashs "$srcPath" "$dstDir/dstFile"; then
            echo "They are equal, ignoring."
            trash "$srcPath"; return 
        else
            echo "They aren't equal, renaming."
            filePreffix="${dstFile/.*/}"; fileSuffix="${dstFile/*./}"
            randomUID=$(tr -dc 'a-zA-Z0-9' < /dev/urandom | head --bytes 8)
            newFile="$filePreffix-$randomUID.$fileSuffix" # append random string to file name
            smartMove "$srcPath" "$dstDir" "$newFile"; return # thunder can strike the same place twice
        fi
    else
        newFile="$dstFile"
    fi
    echo "Moving $srcPath to $dstDir/$newFile"
    mkdir -p "$dstDir"; mv -n "$srcPath" "$dstDir/$newFile"; return
}

# Iterate over image files in A and smart move them do B.
function importPics {
    src=$1; dst=$2

    [ -d "$src" ] || (echo "Source dir don't exist."; exit 1)
    [ -d "$dst" ] || (echo "Destination dir don't exist."; exit 1)
    
    mapfile -t pictures < <(findPics "$src") # see SC2207
    for srcPath in "${pictures[@]}"; do
        unset mime exif exifDate dstDir dstName # garbage collection

        mime=$(file --mime-type "$srcPath") # check mime type and skip iteration if not an image
        if ! (echo "$mime" | rg "image/" 1>/dev/null); then
            echo "$srcPath is not an image."; continue
        fi

        exif=$(exiv2 pr "$srcPath" 2>/dev/null) && exifDate=$(echo "$exif" |
            rg -a 'Image timestamp : ' -r '' | head -1 | sed 's/:/\//;s/:/\//') # get exif date
        
        # if exifDate exists use it to parse fileDate, if not uses file date
        if [ "$exifDate" ]; then # check if not empty 
            dstDir="$dst/$(date -d "$exifDate" "+%y-%m")"
            dstName="$(date -d "$exifDate" "+%s")"
        else # use file date if no exif date
            dstDir="$dst/$(date -r "$srcPath" "+%y-%m")"
            dstName="$(date -r "$srcPath" "+%s")"
        fi

        # shellcheck disable=SC2030,SC2031
        dstName+=${mime/*\//.} # append extension to file name
        
        smartMove "$srcPath" "$dstDir" "$dstName" # move files
    done
}

# Move non image and non hidden files to root.
function moveMisc {
    rootDir="$1"
    mapfile -t misc < <(find "$rootDir" -type f -not -path "*/.*" -path "./*/*") 
    for filePath in "${misc[@]}"; do
        smartMove "$filePath" "$rootDir" "${filePath/*\//}" 
    done
}

# Dedup and lint files at target.
function dedupPics {
    findPics "$1" | rmlint - -T "bl,ed,ef,df" -R -PP -v -S "lam" -o "sh:/tmp/rmlint" && /tmp/rmlint -c -d 1>/dev/null

    # rmlint don't delete by itself but export a script that does that. When you set the output with -o it don't use the defaults and will work stupidly.
    # You have to manuallly tell him everything. And -c and -d are script arguments for delete empty folders and run quiet.
}

# Delete from destination files not found on source
function cleanPics {
    srcDir="$1" ; dstDir="$2"
    mapfile -t pictures < <(findPics "$dstDir")
    for dstPath in "${pictures[@]}"; do
        [[ -f "$srcDir/${dstPath/*\//}" ]] || trash "$dstPath"
    done    
}

# Compare two file paths modify time. Return 1 if first is newer and 0 otherwise. 
function compareMTimes {
    # shellcheck disable=2046
    return $([[ $(stat -c %Y "$1") -gt $(stat -c %Y "$2") ]])
}

# Convert image using ImageMagick
# shellcheck disable=SC2086
function convertPic { convert "$1" -resize x$optimal_height -strip "$2"; }  

# Modify file timestamp and Exif tag 'Creation Date' to match timestamp contained in file name. 
function setDate {
    filePath="$1"; fileName="$2"
    timeUnix=${fileName/-*/}
    timeRFC3339=$(date -d "@$timeUnix" "+%Y-%m-%d %H:%M:%S") || return # if date is invalid
    [[ $#timeUnix -eq 9 ]] || return # if it is not the expected timestamp
    
    # touch -d "@$timeUnix" "$filePath" # disabled because exif is enough and mtime is important for other stuff

    # shellcheck disable=SC2086
    exiv2 -M "set Exif.Photo.DateTimeOriginal $timeRFC3339 2019-07-19 20:00:00" "$filePath"
}

# Resize images, strip metadata and export while optionallly converting.
function optimizePics {
    src="$1"; dst="$2"

    echo "Exporting optimized images."
    
    # shellcheck disable=SC2086
    [ $optimal_height ] || optimal_height=1080 # default image height 

    mapfile -t pictures < <(findPics "$src")
    
    for srcPath in "${pictures[@]}"; do
        fileName="${srcPath/*\//}"
       
        # shellcheck disable=SC2086
        [ $optimal_format ] && dstPath="$dst/${fileName/.*/.$optimal_format}" || dstPath="$dst/$fileName"
        
        compareMTimes "$srcPath" "$dstPath" || continue # skip iteration if destination is newer

        # shellcheck disable=SC2086
        convertPic "$srcPath" "$dstPath" # convert with ImageMagick       
        setDate "$dstPath" "$fileName" # modify file and exif date
    done
}

# MAIN

# FIXME: Not working with --switch
# read optional flags
#while getopts h:f: flag; do
#	case "${flag}" in
#	    h) optimal_height=${OPTARG};;
#	    f) optimal_format=${OPTARG};;
#        \?) echo "Invalid flag!"; exit 1;;
#        :) ;;
#	esac
#done

# flags override
optimal_height="1440"
optimal_format=""

# do stuff 
case $1 in
    --import) dedupPics "$2" && importPics "$2" "$3" && moveMisc "$2";;
    --export) optimizePics "$2" "$3" && cleanPics "$2" "$3";;
    --optimize) optimizePics "$2" "$2";;
    --dedup) dedupPics "$2";;
    *) printHelp; exit;; 
esac

